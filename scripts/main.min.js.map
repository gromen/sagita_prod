{"version":3,"sources":["main.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","navigator","protocol","serviceWorker","register","then","registration","onupdatefound","controller","installingWorker","installing","onstatechange","state","Error","e","console","error","$","document","ready","app","init","this","scrollToTop","backToTop","menuLinkSpy","scroll","scrollTop","fadeIn","fadeOut","$btn","on","animate","click","pathname","replace","target","hash","length","slice","offset","top"],"mappings":";;;;;;;;;;;;;;;;;;CAmBA,WACA,YAMA,IAAAA,GAAAC,QAAA,cAAAC,OAAAC,SAAAC,UAEA,UAAAF,OAAAC,SAAAC,UAEAF,OAAAC,SAAAC,SAAAC,MACA,0DAIA,kBAAAC,aACA,WAAAJ,OAAAC,SAAAI,UAAAP,IACAM,UAAAE,cAAAC,SAAA,qBACAC,KAAA,SAAAC,GAEAA,EAAAC,cAAA,WAKA,GAAAN,UAAAE,cAAAK,WAAA,CAGA,GAAAC,GAAAH,EAAAI,UAEAD,GAAAE,cAAA,WACA,OAAAF,EAAAG,OACA,IAAA,YAKA,KAEA,KAAA,YACA,KAAA,IAAAC,OAAA,yDAvBAZ,SAgCA,SAAAa,GACAC,QAAAC,MAAA,4CAAAF,KAIAG,EAAAC,UAAAC,MAAA,WAEA,GAAAC,IAEAC,KAAA,WACAC,KAAAC,cACAD,KAAAE,YACAF,KAAAG,eAGAF,YAAA,WACAN,EAAApB,QAAA6B,OAAA,WACAT,EAAAK,MAAAK,YAAA,IACAV,EAAA,QAAAW,SAEAX,EAAA,QAAAY,aAKAL,UAAA,WACA,GAAAM,GAAAb,EAAA,OAEAa,GAAAC,GAAA,QAAA,WAEA,MADAd,GAAA,cAAAe,SAAAL,UAAA,GAAA,MACA,KAIAF,YAAA,WACAR,EAAA,4BAAAgB,MAAA,WACA,GAAAnC,SAAAoC,SAAAC,QAAA,MAAA,MAAAb,KAAAY,SAAAC,QAAA,MAAA,KAAArC,SAAAC,UAAAuB,KAAAvB,SAAA,CACA,GAAAqC,GAAAnB,EAAAK,KAAAe,KAEA,IADAD,EAAAA,EAAAE,OAAAF,EAAAnB,EAAA,SAAAK,KAAAe,KAAAE,MAAA,GAAA,KACAH,EAAAE,OAIA,MAHArB,GAAA,aAAAe,SACAL,UAAAS,EAAAI,SAAAC,KACA,MACA,MAOArB,GAAAC","file":"main.min.js","sourcesContent":["/*!\n *\n *  Web Starter Kit\n *  Copyright 2015 Google Inc. All rights reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License\n *\n */\n/* eslint-env browser */\n(function() {\n  'use strict';\n\n  // Check to make sure service workers are supported in the current browser,\n  // and that the current page is accessed from a secure origin. Using a\n  // service worker from an insecure origin will trigger JS console errors. See\n  // http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features\n  var isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n    );\n\n  if ('serviceWorker' in navigator &&\n      (window.location.protocol === 'https:' || isLocalhost)) {\n    navigator.serviceWorker.register('service-worker.js')\n    .then(function(registration) {\n      // updatefound is fired if service-worker.js changes.\n      registration.onupdatefound = function() {\n        // updatefound is also fired the very first time the SW is installed,\n        // and there's no need to prompt for a reload at that point.\n        // So check here to see if the page is already controlled,\n        // i.e. whether there's an existing service worker.\n        if (navigator.serviceWorker.controller) {\n          // The updatefound event implies that registration.installing is set:\n          // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event\n          var installingWorker = registration.installing;\n\n          installingWorker.onstatechange = function() {\n            switch (installingWorker.state) {\n              case 'installed':\n                // At this point, the old content will have been purged and the\n                // fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in the page's interface.\n                break;\n\n              case 'redundant':\n                throw new Error('The installing ' +\n                                'service worker became redundant.');\n\n              default:\n                // Ignore\n            }\n          };\n        }\n      };\n    }).catch(function(e) {\n      console.error('Error during service worker registration:', e);\n    });\n  }\n\n    $(document).ready(function() {\n\n      var app = {\n\n        init: function() {\n          this.scrollToTop();\n          this.backToTop();\n          this.menuLinkSpy();\n        },\n\n        scrollToTop: function() {\n          $(window).scroll(function() {\n            if ($(this).scrollTop() > 800) {\n                $('#top').fadeIn();\n            } else {\n                $('#top').fadeOut();\n            }\n          });\n        },\n\n        backToTop: function() {\n          var $btn = $('#top');\n\n          $btn.on('click', function() {\n            $('html, body').animate({scrollTop:0}, 800);\n            return false;\n          });\n        },\n\n        menuLinkSpy: function() {\n          $('a[href*=#]:not([href=#])').click(function() {\n            if (location.pathname.replace(/^\\//, '') === this.pathname.replace(/^\\//, '') && location.hostname == this.hostname) {\n              var target = $(this.hash);\n              target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');\n              if (target.length) {\n                  $('html,body').animate({\n                    scrollTop: target.offset().top\n                  }, 1000);\n                return false;\n              }\n            }\n          });\n        }\n\n      };\n      app.init();\n  });\n})();\n"]}